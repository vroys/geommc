X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y, initial = seq(1,80), n.iter = 50)
result$median.model
length(result$median.model)
dim(result$samples)
colSums(result$samples)
library(geommc)
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
library(devtools)
devtools::load_all()
devtools::document()
pkgload::dev_help('geomc')
pkgload::dev_help('geomc.vs')
devtools::load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
pkgload::dev_help('geomc')
pkgload::dev_help('geomc.vs')
devtools::load_all()
devtools::document()
devtools::check()
library(geommc)
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
library(devtools)
devtools::load_all()
devtools::document()
devtools::check()
?geomc
?geomc.vs
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
use_mit_license()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
use_gpl_license()
devtools::load_all()
devtools::document()
devtools::check()
library(devtools)
devtools::load_all()
devtools::document()
devtools::check()
aa=c(4)
setdiff(aa,aa)
bb=setdiff(aa,aa)
is.null(bb)
length(bb)
length(NULL)
aa=numeric(4)
aa
aa[1:3]=2
aa
aa[2:5]=4
aa
aa[6:7]=NULL
aa[6]=NULL
aa[6]=numeric(0)
aa
aa[6]=3
aa
aa[7:9]=c(12,3,5)
aa
setwd('C:/Users/vroy/Documents/GitHub/WithSrc/geommc')
setwd(C:/Users/vroy/Box/adhya/gabesana/geomcmc/Rpackage)
setwd('C:/Users/vroy/Box/adhya/gabesana/geomcmc/Rpackage')
load('geomc_vs_bug.RData')
ls()
library(geommc)
geomc.vs(X,current.g,initial)
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
library(devtools)
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
getwd()
setwd('C:/Users/vroy/Box/adhya/gabesana/geomcmc/Rpackage/')
ls()
load('geomc_vs_bug.RData')
geomc.vs(X,current.g,initial = initial)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
library(geommc)
X1 <- matrix(rnorm(50 * 100), nrow = 50)
y1 <- rnorm(50)
geomc.vs(X1, y1)
X1 <- matrix(rnorm(50 * 100), nrow = 50)
y1 <- rnorm(50)
geomc.vs(X1, y1,n.iter = 1)
n=50; p=100; nonzero = 50
trueidx <- 1:50
nonzero.value <- 8
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y, initial = seq(1,80), n.iter = 1)
n=50; p=100; nonzero = 50
trueidx <- 1:50
nonzero.value <- 8
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y, initial = seq(1,80), n.iter = 1)
n=50; p=100; nonzero = 50
trueidx <- 1:90
nonzero.value <- 8
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y, initial = seq(1,80), n.iter = 1)
n=50; p=100; nonzero = 50
trueidx <- 1:90
nonzero.value <- 8
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y, initial = seq(1,80), n.iter = 10)
result$acceptance.rate
result$samples
result$samples[,10]
dim(result$samples)
length(result$samples[,10]!=0)
which(result$samples[,10]==1)
result$mip
result$wmip
which(result$mip>0.5)
length(which(result$mip>0.5))
length(which(result$wmip>0.5))
aa=c(1,2,3)
mean(aa)
mean(aa)^2
3*mean(aa)^2
bb=scale(aa)
crossprod(bb)
bb
cc=aa-mean(aa)
crossprod(cc)
aa=rnorm(50)
cc=aa-mean(aa)
crossprod(cc)
bb=scale(aa)
crossprod(bb)
logp.vs <- function(model,X,y,lam0=0, a0=0, b0=0,lam,w)
{
if(lam<=0) stop("lam must be a positive number")
if(w<=0 || w>=1) stop("w must be a proper fraction")
if(is.logical(model)) model = which(model);
model = as.integer(model)
if(any(any(model>ncol(X)),any(model<1))) stop("The model must be a subset of column numbers of X")
nn = nrow(X)
logw = log(w/(1-w))
ys = y-mean(y)
if(lam0==0){
mult.c=0.5*(nn-1)+a0
add.c=2*b0
}else{
mult.c=0.5*nn+a0
add.c=2*b0+(nn*lam0*mean(y)^2)/(nn+lam0)
}
p0 = length(model)
if(p0 == 0)
return(-mult.c*log(add.c+crossprod(ys)))
#return(-0.5*(nn-1)*log(nn-1))
x.g = scale(X[,model,drop=FALSE])
xtx = crossprod(x.g) + diag(x = lam,nrow = p0)
R = chol(xtx)
z = backsolve(R,crossprod(x.g,ys),transpose = T)
logp = 0.5*p0*log(lam) - sum(log(diag(R))) - mult.c*log(sum(ys^2) - sum(z^2)+add.c) + p0*logw
return(logp)
}
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
logp.vs(c(1,2,3),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
set.seed(111)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
logp.vs(c(1,2,3),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs <- function(model,X,y,lam0=0, a0=0, b0=0,lam,w)
{
if(lam<=0) stop("lam must be a positive number")
if(w<=0 || w>=1) stop("w must be a proper fraction")
if(is.logical(model)) model = which(model);
model = as.integer(model)
if(any(any(model>ncol(X)),any(model<1))) stop("The model must be a subset of column numbers of X")
nn = nrow(X)
logw = log(w/(1-w))
#ys = y-mean(y)
ys=scale(y)
if(lam0==0){
mult.c=0.5*(nn-1)+a0
add.c=2*b0
}else{
mult.c=0.5*nn+a0
add.c=2*b0+(nn*lam0*mean(y)^2)/(nn+lam0)
}
p0 = length(model)
if(p0 == 0)
return(-mult.c*log(add.c+crossprod(ys)))
#return(-0.5*(nn-1)*log(nn-1))
x.g = scale(X[,model,drop=FALSE])
xtx = crossprod(x.g) + diag(x = lam,nrow = p0)
R = chol(xtx)
z = backsolve(R,crossprod(x.g,ys),transpose = T)
logp = 0.5*p0*log(lam) - sum(log(diag(R))) - mult.c*log(sum(ys^2) - sum(z^2)+add.c) + p0*logw
return(logp)
}
logp.vs(c(1,2,3),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs <- function(model,X,y,lam0=0, a0=0, b0=0,lam,w)
{
if(lam<=0) stop("lam must be a positive number")
if(w<=0 || w>=1) stop("w must be a proper fraction")
if(is.logical(model)) model = which(model);
model = as.integer(model)
if(any(any(model>ncol(X)),any(model<1))) stop("The model must be a subset of column numbers of X")
nn = nrow(X)
logw = log(w/(1-w))
if(lam0==0){
mult.c=0.5*(nn-1)+a0
if(b0==0){
ys = scale(y)
add.c=0
}else{
ys = y-mean(y)
add.c=2*b0
}else{
logp.vs <- function(model,X,y,lam0=0, a0=0, b0=0,lam,w)
{
if(lam<=0) stop("lam must be a positive number")
if(w<=0 || w>=1) stop("w must be a proper fraction")
if(is.logical(model)) model = which(model);
model = as.integer(model)
if(any(any(model>ncol(X)),any(model<1))) stop("The model must be a subset of column numbers of X")
nn = nrow(X)
logw = log(w/(1-w))
if(lam0==0){
mult.c=0.5*(nn-1)+a0
if(b0==0){
ys = scale(y)
add.c=0
}else{
ys = y-mean(y)
add.c=2*b0
}
}else{
ys = y-mean(y)
mult.c=0.5*nn+a0
add.c=2*b0+(nn*lam0*mean(y)^2)/(nn+lam0)
}
p0 = length(model)
if(p0 == 0)
return(-mult.c*log(add.c+crossprod(ys)))
#return(-0.5*(nn-1)*log(nn-1))
x.g = scale(X[,model,drop=FALSE])
xtx = crossprod(x.g) + diag(x = lam,nrow = p0)
R = chol(xtx)
z = backsolve(R,crossprod(x.g,ys),transpose = T)
logp = 0.5*p0*log(lam) - sum(log(diag(R))) - mult.c*log(sum(ys^2) - sum(z^2)+add.c) + p0*logw
return(logp)
}
logp.vs(c(1,2,3),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,90),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs <- function(model,X,y,lam0=0, a0=0, b0=0,lam,w)
{
if(lam<=0) stop("lam must be a positive number")
if(w<=0 || w>=1) stop("w must be a proper fraction")
if(is.logical(model)) model = which(model);
model = as.integer(model)
if(any(any(model>ncol(X)),any(model<1))) stop("The model must be a subset of column numbers of X")
nn = nrow(X)
logw = log(w/(1-w))
if(lam0==0){
mult.c=0.5*(nn-1)+a0
add.c=2*b0
if(b0==0){
ys = scale(y)
}else{
ys = y-mean(y)
}
}else{
ys = y-mean(y)
mult.c=0.5*nn+a0
add.c=2*b0+(nn*lam0*mean(y)^2)/(nn+lam0)
}
p0 = length(model)
if(p0 == 0)
return(-mult.c*log(add.c+crossprod(ys)))
#return(-0.5*(nn-1)*log(nn-1))
x.g = scale(X[,model,drop=FALSE])
xtx = crossprod(x.g) + diag(x = lam,nrow = p0)
R = chol(xtx)
z = backsolve(R,crossprod(x.g,ys),transpose = T)
logp = 0.5*p0*log(lam) - sum(log(diag(R))) - mult.c*log(sum(ys^2) - sum(z^2)+add.c) + p0*logw
return(logp)
}
logp.vs(c(2,3,90),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(1,2,3),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
aa=matrix(rnorm(9),nr=3)
aa
solve(aa)
aa[1,c(2,3)]=0;aa[c(2,3),1]=0
aa
solve(aa)
1/aa[1,1]
solve(aa[c(2,3),c(2,3)])
2*rep(1,5)
fn=function(x)return(list(y=x))
fn(2)
fn(2)$y
library(geommc)
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
library(devtools)
load_all()
devtools::document()
devtools::check()
library(devtools)
load_all()
devtools::check()
?geomc.vs
set.seed(12)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
q
q()
set.seed(12)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
result$acceptance.rate
result$mip
result$log.post
result$samples[,3]
result$samples[,50]
result$beta.med
set.seed(21)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
result$beta.med
result$log.post
geomc.vs(X=X, y=y,lam0=.5)
result1=geomc.vs(X=X, y=y,lam0=.05)
result$log.post
result$acceptance.rate
result$median.model
result1=geomc.vs(X=X, y=y,lam0=.1)
result1$median.model
result$acceptance.rate
result1$median.model
result1$log.post
result1$wmip
result1$wam
result1$beta.wam
result1=geomc.vs(X=X, y=y,lam0=.1,a0=1,b0=2)
result1$beta.wam
result1$wmip
result1$median.model
result1$log.post
?logp.vs
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
logp.vs(result$median.model,X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=.2,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=1.2,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^9,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^{-9},lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^{-9},a0=2,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^{-9},a0=2,b0=4,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^{-9},a0=23,b0=4,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^{-9},a0=23^10,b0=4,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^{-9},a0=23^10,b0=4^20,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^{-9},a0=23^10,b0=4^{-20},lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=12^{-9},a0=23^{-10},b0=4^{-20},lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,lam0=0,a0=23^{-10},b0=4^{-20},lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(result$median.model,X,y,a0=23^{-10},lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
q()
library(devtools)
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
pkgload::dev_help('logp.vs')
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
pkgload::dev_help('logp.vs')
devtools::check()
set.seed(1)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
result$log.post
logp.vs(result$median.model,X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,1),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,10),X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,10),X,y,lam0=2,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,10),X,y,lam0=2,a0=2,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,10),X,y,lam0=2,a0=2,b0=5lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,10),X,y,lam0=2,a0=2,b0=5,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
result$beta.med
result$beta.wam
result <- geomc.vs(X=X, y=y,lam0=.5)
result$beta.wam
result$median.model
result <- geomc.vs(X=X, y=y,lam0=5)
result$median.model
result$median.model
result$beta.wam
result <- geomc.vs(X=X, y=y,lam0=5,a0=2)
result$median.model
result$beta.wam
result <- geomc.vs(X=X, y=y,lam0=5,a0=2,b0=4)
result$median.model
result$beta.wam
result <- geomc.vs(X=X, y=y,lam0=25,a0=2,b0=4)
result$median.model
result$beta.wam
?geommc
?geomc.vs
library(devtools)
load_all()
devtools::document()
devtools::check()
