logp.vs(c(2,3,10),X,y,lam0=2,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,10),X,y,lam0=2,a0=2,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,10),X,y,lam0=2,a0=2,b0=5lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs(c(2,3,10),X,y,lam0=2,a0=2,b0=5,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
result$beta.med
result$beta.wam
result <- geomc.vs(X=X, y=y,lam0=.5)
result$beta.wam
result$median.model
result <- geomc.vs(X=X, y=y,lam0=5)
result$median.model
result$median.model
result$beta.wam
result <- geomc.vs(X=X, y=y,lam0=5,a0=2)
result$median.model
result$beta.wam
result <- geomc.vs(X=X, y=y,lam0=5,a0=2,b0=4)
result$median.model
result$beta.wam
result <- geomc.vs(X=X, y=y,lam0=25,a0=2,b0=4)
result$median.model
result$beta.wam
?geommc
?geomc.vs
library(devtools)
load_all()
devtools::document()
devtools::check()
library(Matrix)
sparseMatrix(i = 1:19,j = 1:19,x = TRUE)
sparseMatrix(i = 1:19,j = 1:19,x = TRUE) -> xx
xx@x
apply(x,2,which)
apply(xx,2,which)
rowMeans(xx)
?sparseMatrix
sparseMatrix(i = 1:19,j = 1:19,x = 1) -> xx
xx
apply(xx,2,which)
library(geommc)
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
library(devtools)
load_all()
devtools::check()
?geomc.vs
set.seed(11)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
result$log.post
apply(result$samples,2,which)
result$mip
head(result$samples)
tail(result$samples)
result <- geomc.vs(X=X, y=y,lam0=2)
result$log.post
result$median.model
result$mip
result$wmip
?logp.vs
set.seed(1)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
logp.vs(result$median.model,X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
mult.c=49/2
logp.vs.in <- function(model,X,yty,xty,mult.c,add.c,lam,w)
{
nn = nrow(X)
logw = log(w/(1-w))
p0 = length(model)
if(p0 == 0)
return(-mult.c*log(add.c+yty)
x.g = scale(X[,model,drop=FALSE])
logp.vs.in <- function(model,X,yty,xty,mult.c,add.c,lam,w)
{
nn = nrow(X)
logw = log(w/(1-w))
p0 = length(model)
if(p0 == 0)
return(-mult.c*log(add.c+yty))
x.g = scale(X[,model,drop=FALSE])
xtx = crossprod(x.g) + diag(x = lam,nrow = p0)
R = chol(xtx)
z = backsolve(R,xty[model],transpose = T)
logp = 0.5*p0*log(lam) - sum(log(diag(R))) - mult.c*log(yty - sum(z^2)+add.c) + p0*logw
return(logp)
}
result$median.model
yty=sum(scale(y)^2)
D = apply(X,2,sd)
D = 1/D
ys = scale(y)
Xty = D*as.numeric(crossprod(X,ys))
logp.vs(result$median.model,X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs.in(result$median.model,X,yty=yty,xty=Xty,mult.c=mult.c,add.c=0,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
lam0=.5;a0=2;b0=3
nn=50
ys = y-mean(y)
mult.c=0.5*nn+a0
add.c=2*b0+(nn*lam0*mean(y)^2)/(nn+lam0)
Xty = D*as.numeric(crossprod(X,ys))
yty=sum(ys^2)
logp.vs(result$median.model,X,y,lam0=lam0,a0=a0,b0=b0,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs.in(result$median.model,X,yty=yty,xty=Xty,mult.c=mult.c,add.c=0,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
logp.vs.in(result$median.model,X,yty=yty,xty=Xty,mult.c=mult.c,add.c=add.c,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
library(geommc)
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
library(devtools)
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
devtools::check()
load_all()
library(devtools)
load_all()
devtools::document()
devtools::check()
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y
)
result$median.model
result$wmip
apply(result$samples,2,which)
result$log.post
result <- geomc.vs(X=X, y=y,lam0 = 5)
result$log.post
result$median.model
result$wmip
apply(result$samples,2,which)
result <- geomc.vs(X=X, y=y,lam0 = 5,a0=2)
apply(result$samples,2,which)
result$median.model
result$wmip
result$log.post
result <- geomc.vs(X=X, y=y,lam0 = 5,a0=3,b0=5)
result$median.model
apply(result$samples,2,which)
result$samples
result$log.post
result$mip
.libPaths()
myPaths <- .libPaths()
myPaths <- c(myPaths, 'C:/Users/vroy/R/win-library/4.4')
.libPaths(myPaths)
myPaths <- c(myPaths[3], myPaths[2],myPaths[1])
.libPaths(myPaths)
.libPaths()
set.seed(123)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
result$log.post
apply(result$samples,2,which)
result$mip
result <- geomc.vs(X=X, y=y,lam0 = 2)
result$log.post
result$mip
result$median.model
result$acceptance.rate
result <- geomc.vs(X=X, y=y,lam0 = 2,a0=4)
result$acceptance.rate
result$median.model
result$log.post
result$beta.med
apply(result$samples,2,which)
result <- geomc.vs(X=X, y=y,lam0 = 2,a0=4,b0=-3)
result <- geomc.vs(X=X, y=y,lam0 = 2,a0=4,b0=3)
result$log.post
set.seed(123)
result <- geomc.vs(X=X, y=y,lam0 = 2,a0=4,b0=3)
result$log.post
set.seed(12)
result <- geomc.vs(X=X, y=y,lam0 = 2,a0=4,b0=3)
result$log.post
result <- geomc.vs(X=X, y=y)
result$log.post
set.seed(12)
result <- geomc.vs(X=X, y=y)
result$log.post
set.seed(1)
result <- geomc.vs(X=X, y=y)
result$log.post
set.seed(1)
result <- geomc.vs(X=X, y=y,lam0 = 2)
result$log.post
set.seed(1)
result <- geomc.vs(X=X, y=y,a0 = 2)
result$log.post
set.seed(11)
result <- geomc.vs(X=X, y=y,a0 = 2)
result$log.post
set.seed(123)
result <- geomc.vs(X=X, y=y,a0 = 2,b0=4)
result$log.post
set.seed(11)
result <- geomc.vs(X=X, y=y,a0 = 3,b0=5)
result$log.post
set.seed(123)
library(geommc)
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
library(devtools)
load_all()
devtools::document()
devtools::check()
load_all()
devtools::document()
devtools::check()
?geomc.vs
set.seed(123)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
result$log.post
set.seed(123)
result <- geomc.vs(X=X, y=y,a0=2,b0=4)
result$log.post
set.seed(123)
result <- geomc.vs(X=X, y=y,a0=23,b0=224)
result$log.post
set.seed(123)
result <- geomc.vs(X=X, y=y,lam0 = 4)
result$log.post
apply(result$samples,2,which)
model=c(79)
logp.vs(model,X,y,lam0=4,,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
set.seed(123)
result <- geomc.vs(X=X, y=y,lam0 = 4,a0=3,b0=5)
result$log.post
apply(result$samples,2,which)
logp.vs(c(1,2,3,32,79),X,y,lam0=4,a0=3,b0=5,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
result$log.post
library(devtools)
load_all()
devtools::document()
devtools::check()
set.seed(123)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
logp.vs(result$median.model,X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
result$log.post
apply(result$samples,2,which)
result$log.post
set.seed(123)
result <- geomc.vs(X=X, y=y,lam0 = 4)
result$log.post
apply(result$samples,2,which)
result$log.post
result <- geomc.vs(X=X, y=y,lam0 = 4)
set.seed(123)
result <- geomc.vs(X=X, y=y,a0 = 4,b0=34)
result$log.post
set.seed(123)
result <- geomc.vs(X=X, y=y,lam0=29,a0 = 4,b0=34)
result$log.post
apply(result$samples,2,which)
result$log.post
?geomc.vs
library(devtools)
load_all()
devtools::document()
devtools::check()
set.seed(123)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
logp.vs(result$median.model,X,y,lam = nrow(X)/ncol(X)^2,w = sqrt(nrow(X))/ncol(X))
result$log.post
result$beta.wam
set.seed(123)
result <- geomc.vs(X=X, y=y,lam0=10)
result$beta.wam
?size
log.post=result$log.post
logpost.uniq.ind <-  !duplicated(log.post)
weight.unnorm = exp(log.post[logpost.uniq.ind] - max(log.post))
weight = weight.unnorm/sum(weight.unnorm)
logpost.uniq.ind
weight
log.post[logpost.uniq.ind]
logp.top <- sort(log.post[logpost.uniq.ind], decreasing = T)
cols.top <- unlist(lapply(logp.top, FUN=function(x){which(x==log.post)[1]}))
size.top <- size[cols.top]
cols.top
length(log.post[logpost.uniq.ind])
sum(cols.top)
length(log.post)
?lapply(list, function)
?lapply
sapply(logp.top, FUN=function(x){sum(x==log.post)})
aa=sapply(logp.top, FUN=function(x){sum(x==log.post)})
sum(aa)
length(log.post[logpost.uniq.ind])
sum(logpost.uniq.ind)
logpost.uniq.ind
dim(result$samples)
aa=samples[,logpost.uniq.ind,drop=FALSE]
aa=result$samples[,logpost.uniq.ind,drop=FALSE]
dim(aa)
colSums(aa)
beta.est=matrix(0, 101,11)
aa[,1]
matrix(seq(1,12),nr=4)%*%c(1,1,1)
matrix(seq(1,12),nr=4)
rowSums(matrix(seq(1,12),nr=4)%*%diag(c(1,1,1))
)
matrix(seq(1,12),nr=4)%*%c(1,1,1)/3
library()
library(devtools)
load_all()
load_all()
devtools::document()
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
load_all()
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
devtools::check()
load_all()
devtools::document()
devtools::check()
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
devtools::check()
remove.packages('geommc')
remove.packages('geommc')
?geomc.vs
set.seed()
set.seed(123)
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
result$samples
result$acceptance.rate
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y,model.summary = T)
samps=result$samples
result$mip
samps.postburn<-samps[,burnin:n.iter,drop=FALSE]
n.iter=50;burnin=1; lam0=0; a0=0; b0=0; lam = nrow(X)/ncol(X)^2; w = sqrt(nrow(X))/ncol(X);model.threshold = 0.5
samps.postburn<-samps[,burnin:n.iter,drop=FALSE]
log.postburn<-log.post[burnin:n.iter]
logpost.uniq.ind <-  !duplicated(log.postburn)
log.postburn.uniq<-log.postburn[logpost.uniq.ind]
weight.unnorm <- exp(log.postburn.uniq - max(log.postburn.uniq))
weight <- weight.unnorm/sum(weight.unnorm)
n.rep<-sapply(log.postburn.uniq, FUN=function(x){sum(x==log.postburn)})
samps.uniq<-samps.postburn[,logpost.uniq.ind,drop=FALSE]
modelsize.uniq<-colSums(samps.uniq)
no.model.uniq<-sum(logpost.uniq.ind)
MIP<-rowMeans(samps.postburn)
WMIP<-as.vector(samps.postburn[,logpost.uniq.ind,drop=FALSE]%*%weight)
med.model<-which(MIP>=model.threshold)
model.WAM<-which(WMIP>=model.threshold)
beta.est <- matrix(0, (ncovar+1),no.model.uniq)
ncovar=100
beta.est <- matrix(0, (ncovar+1),no.model.uniq)
for(i in 1:no.model.uniq){
if(modelsize.uniq[i]==0){
beta.est[1, i] <- (nn/(nn+lam0))*mean(y)
}else{
model_i<- samps.uniq[,i]
x.est <- cbind(rep(1, nn), scale(X[, model_i], center = xbar[model_i], scale = 1/D[model_i]))
beta <- solve(crossprod(x.est) + diag(c(lam0, lam*rep(1, modelsize.uniq[i]))), crossprod(x.est, y))
beta.est[c(T, model_i), i] <- c(beta[1]-sum(beta[-1]*xbar[model_i]*D[model_i]),beta[-1] * D[model_i])
}
}
xbar = colMeans(X)
for(i in 1:no.model.uniq){
if(modelsize.uniq[i]==0){
beta.est[1, i] <- (nn/(nn+lam0))*mean(y)
}else{
model_i<- samps.uniq[,i]
x.est <- cbind(rep(1, nn), scale(X[, model_i], center = xbar[model_i], scale = 1/D[model_i]))
beta <- solve(crossprod(x.est) + diag(c(lam0, lam*rep(1, modelsize.uniq[i]))), crossprod(x.est, y))
beta.est[c(T, model_i), i] <- c(beta[1]-sum(beta[-1]*xbar[model_i]*D[model_i]),beta[-1] * D[model_i])
}
}
beta.m<-beta.est%*%no.model.uniq/(n.iter-burnin+1)
dim(beta.est)
no.model.uniq
n.rep
sum(n.rep)
length(n.rep)
beta.m<-beta.est%*%n.rep/(n.iter-burnin+1)
beta.wam <-beta.est%*%weight
beta.m
t(beta.m)
rowSums(beta.est%*%diag(n.rep))/n.iter
beta.m<-rowSums(beta.est%*%diag(n.rep))/(n.iter-burnin+1)
beta.m
beta.wam
beta.wam <- rowSums(beta.est%*%diag(weight))
beta.wam
remove.packages("geommc", lib="~/AppData/Local/R/win-library/4.4")
library(devtools)
load_all()
devtools::document()
devtools::check()
.libPaths()
myPaths <- .libPaths()
myPaths <- c(myPaths, 'C:/Users/vroy/R/win-library/4.4')
.libPaths(myPaths)
myPaths <- c(myPaths[3], myPaths[2],myPaths[1])
.libPaths(myPaths)
.libPaths()
?geomc.vs
n=50; p=100; nonzero = 3
trueidx <- 1:3
nonzero.value <- 4
TrueBeta <- numeric(p)
TrueBeta[trueidx] <- nonzero.value
rho <- 0.5
xone <- matrix(rnorm(n*p), n, p)
X <- sqrt(1-rho)*xone + sqrt(rho)*rnorm(n)
y <- 0.5 + X %*% TrueBeta + rnorm(n)
result <- geomc.vs(X=X, y=y)
result
result <- geomc.vs(X=X, y=y,model.summary = T)
result$acceptance.rate
result$samples
result$mip
result$wmip
result$median.model
result$wam
result$beta.mean
result$beta.wam
result$log.post
result <- geomc.vs(X=X, y=y)
result$log.post
result$acceptance.rate
remove.packages('geommc')
load_all()
devtools::document()
pkgload::dev_help('geomc.vs')
devtools::check()
remove.packages('geommc')
